ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM_S.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PWM_S_initVar
  20              		.bss
  21              		.type	PWM_S_initVar, %object
  22              		.size	PWM_S_initVar, 1
  23              	PWM_S_initVar:
  24 0000 00       		.space	1
  25              		.section	.text.PWM_S_Start,"ax",%progbits
  26              		.align	2
  27              		.global	PWM_S_Start
  28              		.thumb
  29              		.thumb_func
  30              		.type	PWM_S_Start, %function
  31              	PWM_S_Start:
  32              	.LFB0:
  33              		.file 1 "Generated_Source\\PSoC5\\PWM_S.c"
   1:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_S.c **** * File Name: PWM_S.c
   3:Generated_Source\PSoC5/PWM_S.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM_S.c **** *
   5:Generated_Source\PSoC5/PWM_S.c **** * Description:
   6:Generated_Source\PSoC5/PWM_S.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM_S.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM_S.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM_S.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM_S.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM_S.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM_S.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM_S.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM_S.c **** *
  15:Generated_Source\PSoC5/PWM_S.c **** * Note:
  16:Generated_Source\PSoC5/PWM_S.c **** *
  17:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM_S.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM_S.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM_S.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM_S.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM_S.c **** 
  24:Generated_Source\PSoC5/PWM_S.c **** #include "PWM_S.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 2


  25:Generated_Source\PSoC5/PWM_S.c **** 
  26:Generated_Source\PSoC5/PWM_S.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM_S.c **** #ifdef PWM_S_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM_S.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM_S.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM_S.c **** #endif /* PWM_S_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/PWM_S.c **** 
  32:Generated_Source\PSoC5/PWM_S.c **** uint8 PWM_S_initVar = 0u;
  33:Generated_Source\PSoC5/PWM_S.c **** 
  34:Generated_Source\PSoC5/PWM_S.c **** 
  35:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM_S.c **** * Function Name: PWM_S_Start
  37:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM_S.c **** *
  39:Generated_Source\PSoC5/PWM_S.c **** * Summary:
  40:Generated_Source\PSoC5/PWM_S.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM_S.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM_S.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM_S.c **** *
  44:Generated_Source\PSoC5/PWM_S.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM_S.c **** *  None
  46:Generated_Source\PSoC5/PWM_S.c **** *
  47:Generated_Source\PSoC5/PWM_S.c **** * Return:
  48:Generated_Source\PSoC5/PWM_S.c **** *  None
  49:Generated_Source\PSoC5/PWM_S.c **** *
  50:Generated_Source\PSoC5/PWM_S.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM_S.c **** *  PWM_S_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM_S.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM_S.c **** *
  54:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM_S.c **** void PWM_S_Start(void) 
  56:Generated_Source\PSoC5/PWM_S.c **** {
  34              		.loc 1 56 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  57:Generated_Source\PSoC5/PWM_S.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM_S.c ****     if(PWM_S_initVar == 0u)
  44              		.loc 1 58 0
  45 0004 064B     		ldr	r3, .L3
  46 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  47 0008 002B     		cmp	r3, #0
  48 000a 04D1     		bne	.L2
  59:Generated_Source\PSoC5/PWM_S.c ****     {
  60:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_Init();
  49              		.loc 1 60 0
  50 000c FFF7FEFF 		bl	PWM_S_Init
  61:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_initVar = 1u;
  51              		.loc 1 61 0
  52 0010 034B     		ldr	r3, .L3
  53 0012 0122     		movs	r2, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 3


  54 0014 1A70     		strb	r2, [r3]
  55              	.L2:
  62:Generated_Source\PSoC5/PWM_S.c ****     }
  63:Generated_Source\PSoC5/PWM_S.c ****     PWM_S_Enable();
  56              		.loc 1 63 0
  57 0016 FFF7FEFF 		bl	PWM_S_Enable
  64:Generated_Source\PSoC5/PWM_S.c **** 
  65:Generated_Source\PSoC5/PWM_S.c **** }
  58              		.loc 1 65 0
  59 001a 00BF     		nop
  60 001c 80BD     		pop	{r7, pc}
  61              	.L4:
  62 001e 00BF     		.align	2
  63              	.L3:
  64 0020 00000000 		.word	PWM_S_initVar
  65              		.cfi_endproc
  66              	.LFE0:
  67              		.size	PWM_S_Start, .-PWM_S_Start
  68              		.section	.text.PWM_S_Init,"ax",%progbits
  69              		.align	2
  70              		.global	PWM_S_Init
  71              		.thumb
  72              		.thumb_func
  73              		.type	PWM_S_Init, %function
  74              	PWM_S_Init:
  75              	.LFB1:
  66:Generated_Source\PSoC5/PWM_S.c **** 
  67:Generated_Source\PSoC5/PWM_S.c **** 
  68:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM_S.c **** * Function Name: PWM_S_Init
  70:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM_S.c **** *
  72:Generated_Source\PSoC5/PWM_S.c **** * Summary:
  73:Generated_Source\PSoC5/PWM_S.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM_S.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM_S.c **** *  PWM_S_Start().
  76:Generated_Source\PSoC5/PWM_S.c **** *
  77:Generated_Source\PSoC5/PWM_S.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM_S.c **** *  None
  79:Generated_Source\PSoC5/PWM_S.c **** *
  80:Generated_Source\PSoC5/PWM_S.c **** * Return:
  81:Generated_Source\PSoC5/PWM_S.c **** *  None
  82:Generated_Source\PSoC5/PWM_S.c **** *
  83:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM_S.c **** void PWM_S_Init(void) 
  85:Generated_Source\PSoC5/PWM_S.c **** {
  76              		.loc 1 85 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 8
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 82B0     		sub	sp, sp, #8
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 4


  87              		.cfi_def_cfa_register 7
  86:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UsingFixedFunction || PWM_S_UseControl)
  87:Generated_Source\PSoC5/PWM_S.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction || PWM_S_UseControl) */
  89:Generated_Source\PSoC5/PWM_S.c **** 
  90:Generated_Source\PSoC5/PWM_S.c ****     #if(!PWM_S_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM_S.c ****         #if(PWM_S_UseStatus)
  92:Generated_Source\PSoC5/PWM_S.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM_S.c ****             uint8 PWM_S_interruptState;
  94:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UseStatus) */
  95:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (!PWM_S_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM_S.c **** 
  97:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM_S.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_CONTROL |= PWM_S_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_CONTROL |= PWM_S_CFG0_DB;
 102:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM_S.c **** 
 104:Generated_Source\PSoC5/PWM_S.c ****         ctrl = PWM_S_CONTROL3 & ((uint8 )(~PWM_S_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_CONTROL3 = ctrl | PWM_S_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM_S.c **** 
 107:Generated_Source\PSoC5/PWM_S.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_RT1 &= ((uint8)(~PWM_S_RT1_MASK));
 109:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_RT1 |= PWM_S_SYNC;
 110:Generated_Source\PSoC5/PWM_S.c **** 
 111:Generated_Source\PSoC5/PWM_S.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_RT1 &= ((uint8)(~PWM_S_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_RT1 |= PWM_S_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM_S.c **** 
 115:Generated_Source\PSoC5/PWM_S.c ****     #elif (PWM_S_UseControl)
 116:Generated_Source\PSoC5/PWM_S.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM_S.c ****         ctrl = PWM_S_CONTROL & ((uint8)(~PWM_S_CTRL_CMPMODE2_MASK)) &
  88              		.loc 1 117 0
  89 0006 104B     		ldr	r3, .L6
  90 0008 1B78     		ldrb	r3, [r3]
  91 000a DBB2     		uxtb	r3, r3
  92 000c 23F03F03 		bic	r3, r3, #63
  93 0010 FB71     		strb	r3, [r7, #7]
 118:Generated_Source\PSoC5/PWM_S.c ****                 ((uint8)(~PWM_S_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_CONTROL = ctrl | PWM_S_DEFAULT_COMPARE2_MODE |
  94              		.loc 1 119 0
  95 0012 0D4A     		ldr	r2, .L6
  96 0014 FB79     		ldrb	r3, [r7, #7]
  97 0016 43F02003 		orr	r3, r3, #32
  98 001a DBB2     		uxtb	r3, r3
  99 001c 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/PWM_S.c ****                                    PWM_S_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM_S.c **** 
 123:Generated_Source\PSoC5/PWM_S.c ****     #if (!PWM_S_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_Resolution == 8)
 125:Generated_Source\PSoC5/PWM_S.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_AUX_CONTROLDP0 |= (PWM_S_AUX_CTRL_FIFO0_CLR);
 100              		.loc 1 126 0
 101 001e 0B4A     		ldr	r2, .L6+4
 102 0020 0A4B     		ldr	r3, .L6+4
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 5


 103 0022 1B78     		ldrb	r3, [r3]
 104 0024 DBB2     		uxtb	r3, r3
 105 0026 43F00103 		orr	r3, r3, #1
 106 002a DBB2     		uxtb	r3, r3
 107 002c 1370     		strb	r3, [r2]
 127:Generated_Source\PSoC5/PWM_S.c ****         #else /* (PWM_S_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM_S.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_AUX_CONTROLDP0 |= (PWM_S_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_AUX_CONTROLDP1 |= (PWM_S_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM_S.c **** 
 133:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_WriteCounter(PWM_S_INIT_PERIOD_VALUE);
 108              		.loc 1 133 0
 109 002e 1920     		movs	r0, #25
 110 0030 FFF7FEFF 		bl	PWM_S_WriteCounter
 134:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (!PWM_S_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM_S.c **** 
 136:Generated_Source\PSoC5/PWM_S.c ****     PWM_S_WritePeriod(PWM_S_INIT_PERIOD_VALUE);
 111              		.loc 1 136 0
 112 0034 1920     		movs	r0, #25
 113 0036 FFF7FEFF 		bl	PWM_S_WritePeriod
 137:Generated_Source\PSoC5/PWM_S.c **** 
 138:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_WriteCompare(PWM_S_INIT_COMPARE_VALUE1);
 114              		.loc 1 139 0
 115 003a 0C20     		movs	r0, #12
 116 003c FFF7FEFF 		bl	PWM_S_WriteCompare
 140:Generated_Source\PSoC5/PWM_S.c ****         #else
 141:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_WriteCompare1(PWM_S_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_WriteCompare2(PWM_S_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM_S.c **** 
 145:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_WriteKillTime(PWM_S_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM_S.c **** 
 149:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_WriteDeadTime(PWM_S_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM_S.c **** 
 153:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UseStatus || PWM_S_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_SetInterruptMode(PWM_S_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UseStatus || PWM_S_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM_S.c **** 
 157:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM_S.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_GLOBAL_ENABLE |= PWM_S_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM_S.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_CONTROL2 |= PWM_S_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM_S.c ****     #else
 163:Generated_Source\PSoC5/PWM_S.c ****         #if(PWM_S_UseStatus)
 164:Generated_Source\PSoC5/PWM_S.c **** 
 165:Generated_Source\PSoC5/PWM_S.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM_S.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM_S.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_STATUS_AUX_CTRL |= PWM_S_STATUS_ACTL_INT_EN_MASK;
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 6


 170:Generated_Source\PSoC5/PWM_S.c **** 
 171:Generated_Source\PSoC5/PWM_S.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM_S.c ****             CyExitCriticalSection(PWM_S_interruptState);
 173:Generated_Source\PSoC5/PWM_S.c **** 
 174:Generated_Source\PSoC5/PWM_S.c ****             /* Clear the FIFO to enable the PWM_S_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM_S.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_ClearFIFO();
 177:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UseStatus) */
 178:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM_S.c **** }
 117              		.loc 1 179 0
 118 0040 00BF     		nop
 119 0042 0837     		adds	r7, r7, #8
 120              		.cfi_def_cfa_offset 8
 121 0044 BD46     		mov	sp, r7
 122              		.cfi_def_cfa_register 13
 123              		@ sp needed
 124 0046 80BD     		pop	{r7, pc}
 125              	.L7:
 126              		.align	2
 127              	.L6:
 128 0048 7C640040 		.word	1073767548
 129 004c 9C640040 		.word	1073767580
 130              		.cfi_endproc
 131              	.LFE1:
 132              		.size	PWM_S_Init, .-PWM_S_Init
 133              		.section	.text.PWM_S_Enable,"ax",%progbits
 134              		.align	2
 135              		.global	PWM_S_Enable
 136              		.thumb
 137              		.thumb_func
 138              		.type	PWM_S_Enable, %function
 139              	PWM_S_Enable:
 140              	.LFB2:
 180:Generated_Source\PSoC5/PWM_S.c **** 
 181:Generated_Source\PSoC5/PWM_S.c **** 
 182:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM_S.c **** * Function Name: PWM_S_Enable
 184:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM_S.c **** *
 186:Generated_Source\PSoC5/PWM_S.c **** * Summary:
 187:Generated_Source\PSoC5/PWM_S.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM_S.c **** *
 189:Generated_Source\PSoC5/PWM_S.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM_S.c **** *  None
 191:Generated_Source\PSoC5/PWM_S.c **** *
 192:Generated_Source\PSoC5/PWM_S.c **** * Return:
 193:Generated_Source\PSoC5/PWM_S.c **** *  None
 194:Generated_Source\PSoC5/PWM_S.c **** *
 195:Generated_Source\PSoC5/PWM_S.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM_S.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM_S.c **** *
 198:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM_S.c **** void PWM_S_Enable(void) 
 200:Generated_Source\PSoC5/PWM_S.c **** {
 141              		.loc 1 200 0
 142              		.cfi_startproc
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 7


 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 80B4     		push	{r7}
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 7, -4
 149 0002 00AF     		add	r7, sp, #0
 150              		.cfi_def_cfa_register 7
 201:Generated_Source\PSoC5/PWM_S.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_GLOBAL_ENABLE |= PWM_S_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_GLOBAL_STBY_ENABLE |= PWM_S_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM_S.c **** 
 207:Generated_Source\PSoC5/PWM_S.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UseControl || PWM_S_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_CONTROL |= PWM_S_CTRL_ENABLE;
 151              		.loc 1 209 0
 152 0004 054A     		ldr	r2, .L9
 153 0006 054B     		ldr	r3, .L9
 154 0008 1B78     		ldrb	r3, [r3]
 155 000a DBB2     		uxtb	r3, r3
 156 000c 63F07F03 		orn	r3, r3, #127
 157 0010 DBB2     		uxtb	r3, r3
 158 0012 1370     		strb	r3, [r2]
 210:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UseControl || PWM_S_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM_S.c **** }
 159              		.loc 1 211 0
 160 0014 00BF     		nop
 161 0016 BD46     		mov	sp, r7
 162              		.cfi_def_cfa_register 13
 163              		@ sp needed
 164 0018 80BC     		pop	{r7}
 165              		.cfi_restore 7
 166              		.cfi_def_cfa_offset 0
 167 001a 7047     		bx	lr
 168              	.L10:
 169              		.align	2
 170              	.L9:
 171 001c 7C640040 		.word	1073767548
 172              		.cfi_endproc
 173              	.LFE2:
 174              		.size	PWM_S_Enable, .-PWM_S_Enable
 175              		.section	.text.PWM_S_Stop,"ax",%progbits
 176              		.align	2
 177              		.global	PWM_S_Stop
 178              		.thumb
 179              		.thumb_func
 180              		.type	PWM_S_Stop, %function
 181              	PWM_S_Stop:
 182              	.LFB3:
 212:Generated_Source\PSoC5/PWM_S.c **** 
 213:Generated_Source\PSoC5/PWM_S.c **** 
 214:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM_S.c **** * Function Name: PWM_S_Stop
 216:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM_S.c **** *
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 8


 218:Generated_Source\PSoC5/PWM_S.c **** * Summary:
 219:Generated_Source\PSoC5/PWM_S.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM_S.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM_S.c **** *
 222:Generated_Source\PSoC5/PWM_S.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM_S.c **** *  None
 224:Generated_Source\PSoC5/PWM_S.c **** *
 225:Generated_Source\PSoC5/PWM_S.c **** * Return:
 226:Generated_Source\PSoC5/PWM_S.c **** *  None
 227:Generated_Source\PSoC5/PWM_S.c **** *
 228:Generated_Source\PSoC5/PWM_S.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM_S.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM_S.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM_S.c **** *
 232:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM_S.c **** void PWM_S_Stop(void) 
 234:Generated_Source\PSoC5/PWM_S.c **** {
 183              		.loc 1 234 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188 0000 80B4     		push	{r7}
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 7, -4
 191 0002 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 235:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UseControl || PWM_S_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_CONTROL &= ((uint8)(~PWM_S_CTRL_ENABLE));
 193              		.loc 1 236 0
 194 0004 054A     		ldr	r2, .L12
 195 0006 054B     		ldr	r3, .L12
 196 0008 1B78     		ldrb	r3, [r3]
 197 000a DBB2     		uxtb	r3, r3
 198 000c 03F07F03 		and	r3, r3, #127
 199 0010 DBB2     		uxtb	r3, r3
 200 0012 1370     		strb	r3, [r2]
 237:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UseControl || PWM_S_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM_S.c **** 
 239:Generated_Source\PSoC5/PWM_S.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_GLOBAL_ENABLE &= ((uint8)(~PWM_S_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM_S.c ****         PWM_S_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_S_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM_S.c **** }
 201              		.loc 1 244 0
 202 0014 00BF     		nop
 203 0016 BD46     		mov	sp, r7
 204              		.cfi_def_cfa_register 13
 205              		@ sp needed
 206 0018 80BC     		pop	{r7}
 207              		.cfi_restore 7
 208              		.cfi_def_cfa_offset 0
 209 001a 7047     		bx	lr
 210              	.L13:
 211              		.align	2
 212              	.L12:
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 9


 213 001c 7C640040 		.word	1073767548
 214              		.cfi_endproc
 215              	.LFE3:
 216              		.size	PWM_S_Stop, .-PWM_S_Stop
 217              		.section	.text.PWM_S_WriteCounter,"ax",%progbits
 218              		.align	2
 219              		.global	PWM_S_WriteCounter
 220              		.thumb
 221              		.thumb_func
 222              		.type	PWM_S_WriteCounter, %function
 223              	PWM_S_WriteCounter:
 224              	.LFB4:
 245:Generated_Source\PSoC5/PWM_S.c **** 
 246:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM_S.c **** 
 249:Generated_Source\PSoC5/PWM_S.c **** 
 250:Generated_Source\PSoC5/PWM_S.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM_S.c ****         * Function Name: PWM_S_SetCompareMode
 252:Generated_Source\PSoC5/PWM_S.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM_S.c ****         *
 254:Generated_Source\PSoC5/PWM_S.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM_S.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM_S.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM_S.c ****         *
 258:Generated_Source\PSoC5/PWM_S.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM_S.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM_S.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM_S.c ****         *
 262:Generated_Source\PSoC5/PWM_S.c ****         * Return:
 263:Generated_Source\PSoC5/PWM_S.c ****         *  None
 264:Generated_Source\PSoC5/PWM_S.c ****         *
 265:Generated_Source\PSoC5/PWM_S.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM_S.c ****         void PWM_S_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM_S.c ****         {
 268:Generated_Source\PSoC5/PWM_S.c ****             #if(PWM_S_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM_S.c **** 
 270:Generated_Source\PSoC5/PWM_S.c ****                 #if(0 != PWM_S_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM_S.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_S_CTRL_CMPMODE1_SH
 272:Generated_Source\PSoC5/PWM_S.c ****                 #else
 273:Generated_Source\PSoC5/PWM_S.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM_S.c ****                 #endif /* (0 != PWM_S_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM_S.c **** 
 276:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_CONTROL3 &= ((uint8)(~PWM_S_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM_S.c **** 
 279:Generated_Source\PSoC5/PWM_S.c ****             #elif (PWM_S_UseControl)
 280:Generated_Source\PSoC5/PWM_S.c **** 
 281:Generated_Source\PSoC5/PWM_S.c ****                 #if(0 != PWM_S_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM_S.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_S_CTRL_CMPMODE1_S
 283:Generated_Source\PSoC5/PWM_S.c ****                                                 PWM_S_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM_S.c ****                 #else
 285:Generated_Source\PSoC5/PWM_S.c ****                     uint8 comparemode1masked = comparemode & PWM_S_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM_S.c ****                 #endif /* (0 != PWM_S_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM_S.c **** 
 288:Generated_Source\PSoC5/PWM_S.c ****                 #if(0 != PWM_S_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM_S.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_S_CTRL_CMPMODE2_S
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 10


 290:Generated_Source\PSoC5/PWM_S.c ****                                                PWM_S_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM_S.c ****                 #else
 292:Generated_Source\PSoC5/PWM_S.c ****                     uint8 comparemode2masked = comparemode & PWM_S_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM_S.c ****                 #endif /* (0 != PWM_S_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM_S.c **** 
 295:Generated_Source\PSoC5/PWM_S.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_CONTROL &= ((uint8)(~(PWM_S_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM_S.c ****                                             PWM_S_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM_S.c **** 
 300:Generated_Source\PSoC5/PWM_S.c ****             #else
 301:Generated_Source\PSoC5/PWM_S.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM_S.c ****             #endif /* (PWM_S_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM_S.c ****         }
 304:Generated_Source\PSoC5/PWM_S.c ****     #endif /* PWM_S_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM_S.c **** 
 306:Generated_Source\PSoC5/PWM_S.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM_S.c **** 
 308:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM_S.c **** 
 310:Generated_Source\PSoC5/PWM_S.c **** 
 311:Generated_Source\PSoC5/PWM_S.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM_S.c ****         * Function Name: PWM_S_SetCompareMode1
 313:Generated_Source\PSoC5/PWM_S.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM_S.c ****         *
 315:Generated_Source\PSoC5/PWM_S.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM_S.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM_S.c ****         *
 318:Generated_Source\PSoC5/PWM_S.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM_S.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM_S.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM_S.c ****         *
 322:Generated_Source\PSoC5/PWM_S.c ****         * Return:
 323:Generated_Source\PSoC5/PWM_S.c ****         *  None
 324:Generated_Source\PSoC5/PWM_S.c ****         *
 325:Generated_Source\PSoC5/PWM_S.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM_S.c ****         void PWM_S_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM_S.c ****         {
 328:Generated_Source\PSoC5/PWM_S.c ****             #if(0 != PWM_S_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM_S.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_S_CTRL_CMPMODE1_SHIFT)
 330:Generated_Source\PSoC5/PWM_S.c ****                                            PWM_S_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM_S.c ****             #else
 332:Generated_Source\PSoC5/PWM_S.c ****                 uint8 comparemodemasked = comparemode & PWM_S_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM_S.c ****             #endif /* (0 != PWM_S_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM_S.c **** 
 335:Generated_Source\PSoC5/PWM_S.c ****             #if (PWM_S_UseControl)
 336:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_CONTROL &= ((uint8)(~PWM_S_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM_S.c ****             #endif /* (PWM_S_UseControl) */
 339:Generated_Source\PSoC5/PWM_S.c ****         }
 340:Generated_Source\PSoC5/PWM_S.c ****     #endif /* PWM_S_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM_S.c **** 
 342:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM_S.c **** 
 344:Generated_Source\PSoC5/PWM_S.c **** 
 345:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_SetCompareMode2
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 11


 347:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM_S.c ****     *
 349:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM_S.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM_S.c ****     *
 352:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM_S.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM_S.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM_S.c ****     *
 356:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 357:Generated_Source\PSoC5/PWM_S.c ****     *  None
 358:Generated_Source\PSoC5/PWM_S.c ****     *
 359:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM_S.c ****     {
 362:Generated_Source\PSoC5/PWM_S.c **** 
 363:Generated_Source\PSoC5/PWM_S.c ****         #if(0 != PWM_S_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM_S.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_S_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM_S.c ****                                                  PWM_S_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM_S.c ****         #else
 367:Generated_Source\PSoC5/PWM_S.c ****             uint8 comparemodemasked = comparemode & PWM_S_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (0 != PWM_S_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM_S.c **** 
 370:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_UseControl)
 371:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_CONTROL &= ((uint8)(~PWM_S_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UseControl) */
 374:Generated_Source\PSoC5/PWM_S.c ****     }
 375:Generated_Source\PSoC5/PWM_S.c ****     #endif /*PWM_S_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM_S.c **** 
 377:Generated_Source\PSoC5/PWM_S.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM_S.c **** 
 379:Generated_Source\PSoC5/PWM_S.c **** 
 380:Generated_Source\PSoC5/PWM_S.c **** #if (!PWM_S_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM_S.c **** 
 382:Generated_Source\PSoC5/PWM_S.c **** 
 383:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_WriteCounter
 385:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM_S.c ****     *
 387:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM_S.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM_S.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM_S.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM_S.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM_S.c ****     *
 393:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM_S.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM_S.c ****     *
 396:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 397:Generated_Source\PSoC5/PWM_S.c ****     *  None
 398:Generated_Source\PSoC5/PWM_S.c ****     *
 399:Generated_Source\PSoC5/PWM_S.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM_S.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM_S.c ****     *
 402:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_WriteCounter(uint8 counter) \
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 12


 404:Generated_Source\PSoC5/PWM_S.c ****                                        
 405:Generated_Source\PSoC5/PWM_S.c ****     {
 225              		.loc 1 405 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 83B0     		sub	sp, sp, #12
 234              		.cfi_def_cfa_offset 16
 235 0004 00AF     		add	r7, sp, #0
 236              		.cfi_def_cfa_register 7
 237 0006 0346     		mov	r3, r0
 238 0008 FB71     		strb	r3, [r7, #7]
 406:Generated_Source\PSoC5/PWM_S.c ****         CY_SET_REG8(PWM_S_COUNTER_LSB_PTR, counter);
 239              		.loc 1 406 0
 240 000a 044A     		ldr	r2, .L15
 241 000c FB79     		ldrb	r3, [r7, #7]
 242 000e 1370     		strb	r3, [r2]
 407:Generated_Source\PSoC5/PWM_S.c ****     }
 243              		.loc 1 407 0
 244 0010 00BF     		nop
 245 0012 0C37     		adds	r7, r7, #12
 246              		.cfi_def_cfa_offset 4
 247 0014 BD46     		mov	sp, r7
 248              		.cfi_def_cfa_register 13
 249              		@ sp needed
 250 0016 80BC     		pop	{r7}
 251              		.cfi_restore 7
 252              		.cfi_def_cfa_offset 0
 253 0018 7047     		bx	lr
 254              	.L16:
 255 001a 00BF     		.align	2
 256              	.L15:
 257 001c 0C640040 		.word	1073767436
 258              		.cfi_endproc
 259              	.LFE4:
 260              		.size	PWM_S_WriteCounter, .-PWM_S_WriteCounter
 261              		.section	.text.PWM_S_ReadCounter,"ax",%progbits
 262              		.align	2
 263              		.global	PWM_S_ReadCounter
 264              		.thumb
 265              		.thumb_func
 266              		.type	PWM_S_ReadCounter, %function
 267              	PWM_S_ReadCounter:
 268              	.LFB5:
 408:Generated_Source\PSoC5/PWM_S.c **** 
 409:Generated_Source\PSoC5/PWM_S.c **** 
 410:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadCounter
 412:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM_S.c ****     *
 414:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM_S.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM_S.c ****     *  if the counter is enabled or running.
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 13


 417:Generated_Source\PSoC5/PWM_S.c ****     *
 418:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM_S.c ****     *  None
 420:Generated_Source\PSoC5/PWM_S.c ****     *
 421:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 422:Generated_Source\PSoC5/PWM_S.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM_S.c ****     *
 424:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM_S.c ****     {
 269              		.loc 1 426 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 1, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274 0000 80B4     		push	{r7}
 275              		.cfi_def_cfa_offset 4
 276              		.cfi_offset 7, -4
 277 0002 00AF     		add	r7, sp, #0
 278              		.cfi_def_cfa_register 7
 427:Generated_Source\PSoC5/PWM_S.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM_S.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM_S.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM_S.c ****           (void)CY_GET_REG8(PWM_S_COUNTERCAP_LSB_PTR_8BIT);
 279              		.loc 1 430 0
 280 0004 044B     		ldr	r3, .L19
 281 0006 1B78     		ldrb	r3, [r3]
 431:Generated_Source\PSoC5/PWM_S.c **** 
 432:Generated_Source\PSoC5/PWM_S.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM_S.c ****         return (CY_GET_REG8(PWM_S_CAPTURE_LSB_PTR));
 282              		.loc 1 433 0
 283 0008 044B     		ldr	r3, .L19+4
 284 000a 1B78     		ldrb	r3, [r3]
 285 000c DBB2     		uxtb	r3, r3
 434:Generated_Source\PSoC5/PWM_S.c ****     }
 286              		.loc 1 434 0
 287 000e 1846     		mov	r0, r3
 288 0010 BD46     		mov	sp, r7
 289              		.cfi_def_cfa_register 13
 290              		@ sp needed
 291 0012 80BC     		pop	{r7}
 292              		.cfi_restore 7
 293              		.cfi_def_cfa_offset 0
 294 0014 7047     		bx	lr
 295              	.L20:
 296 0016 00BF     		.align	2
 297              	.L19:
 298 0018 1C640040 		.word	1073767452
 299 001c 5C640040 		.word	1073767516
 300              		.cfi_endproc
 301              	.LFE5:
 302              		.size	PWM_S_ReadCounter, .-PWM_S_ReadCounter
 303              		.section	.text.PWM_S_WritePeriod,"ax",%progbits
 304              		.align	2
 305              		.global	PWM_S_WritePeriod
 306              		.thumb
 307              		.thumb_func
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 14


 308              		.type	PWM_S_WritePeriod, %function
 309              	PWM_S_WritePeriod:
 310              	.LFB6:
 435:Generated_Source\PSoC5/PWM_S.c **** 
 436:Generated_Source\PSoC5/PWM_S.c ****     #if (PWM_S_UseStatus)
 437:Generated_Source\PSoC5/PWM_S.c **** 
 438:Generated_Source\PSoC5/PWM_S.c **** 
 439:Generated_Source\PSoC5/PWM_S.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM_S.c ****         * Function Name: PWM_S_ClearFIFO
 441:Generated_Source\PSoC5/PWM_S.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM_S.c ****         *
 443:Generated_Source\PSoC5/PWM_S.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM_S.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM_S.c ****         *
 446:Generated_Source\PSoC5/PWM_S.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM_S.c ****         *  None
 448:Generated_Source\PSoC5/PWM_S.c ****         *
 449:Generated_Source\PSoC5/PWM_S.c ****         * Return:
 450:Generated_Source\PSoC5/PWM_S.c ****         *  None
 451:Generated_Source\PSoC5/PWM_S.c ****         *
 452:Generated_Source\PSoC5/PWM_S.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM_S.c ****         void PWM_S_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM_S.c ****         {
 455:Generated_Source\PSoC5/PWM_S.c ****             while(0u != (PWM_S_ReadStatusRegister() & PWM_S_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM_S.c ****             {
 457:Generated_Source\PSoC5/PWM_S.c ****                 (void)PWM_S_ReadCapture();
 458:Generated_Source\PSoC5/PWM_S.c ****             }
 459:Generated_Source\PSoC5/PWM_S.c ****         }
 460:Generated_Source\PSoC5/PWM_S.c **** 
 461:Generated_Source\PSoC5/PWM_S.c ****     #endif /* PWM_S_UseStatus */
 462:Generated_Source\PSoC5/PWM_S.c **** 
 463:Generated_Source\PSoC5/PWM_S.c **** #endif /* !PWM_S_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM_S.c **** 
 465:Generated_Source\PSoC5/PWM_S.c **** 
 466:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM_S.c **** * Function Name: PWM_S_WritePeriod
 468:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM_S.c **** *
 470:Generated_Source\PSoC5/PWM_S.c **** * Summary:
 471:Generated_Source\PSoC5/PWM_S.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM_S.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM_S.c **** *
 474:Generated_Source\PSoC5/PWM_S.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM_S.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM_S.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM_S.c **** *
 478:Generated_Source\PSoC5/PWM_S.c **** * Return:
 479:Generated_Source\PSoC5/PWM_S.c **** *  None
 480:Generated_Source\PSoC5/PWM_S.c **** *
 481:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM_S.c **** void PWM_S_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM_S.c **** {
 311              		.loc 1 483 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315              		@ link register save eliminated.
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 15


 316 0000 80B4     		push	{r7}
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 7, -4
 319 0002 83B0     		sub	sp, sp, #12
 320              		.cfi_def_cfa_offset 16
 321 0004 00AF     		add	r7, sp, #0
 322              		.cfi_def_cfa_register 7
 323 0006 0346     		mov	r3, r0
 324 0008 FB71     		strb	r3, [r7, #7]
 484:Generated_Source\PSoC5/PWM_S.c ****     #if(PWM_S_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM_S.c ****         CY_SET_REG16(PWM_S_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM_S.c ****     #else
 487:Generated_Source\PSoC5/PWM_S.c ****         CY_SET_REG8(PWM_S_PERIOD_LSB_PTR, period);
 325              		.loc 1 487 0
 326 000a 044A     		ldr	r2, .L22
 327 000c FB79     		ldrb	r3, [r7, #7]
 328 000e 1370     		strb	r3, [r2]
 488:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM_S.c **** }
 329              		.loc 1 489 0
 330 0010 00BF     		nop
 331 0012 0C37     		adds	r7, r7, #12
 332              		.cfi_def_cfa_offset 4
 333 0014 BD46     		mov	sp, r7
 334              		.cfi_def_cfa_register 13
 335              		@ sp needed
 336 0016 80BC     		pop	{r7}
 337              		.cfi_restore 7
 338              		.cfi_def_cfa_offset 0
 339 0018 7047     		bx	lr
 340              	.L23:
 341 001a 00BF     		.align	2
 342              	.L22:
 343 001c 4C640040 		.word	1073767500
 344              		.cfi_endproc
 345              	.LFE6:
 346              		.size	PWM_S_WritePeriod, .-PWM_S_WritePeriod
 347              		.section	.text.PWM_S_WriteCompare,"ax",%progbits
 348              		.align	2
 349              		.global	PWM_S_WriteCompare
 350              		.thumb
 351              		.thumb_func
 352              		.type	PWM_S_WriteCompare, %function
 353              	PWM_S_WriteCompare:
 354              	.LFB7:
 490:Generated_Source\PSoC5/PWM_S.c **** 
 491:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM_S.c **** 
 493:Generated_Source\PSoC5/PWM_S.c **** 
 494:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_WriteCompare
 496:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM_S.c ****     *
 498:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM_S.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM_S.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM_S.c ****     *  The compare output will be driven high when the present counter value is
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 16


 502:Generated_Source\PSoC5/PWM_S.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM_S.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM_S.c ****     *
 505:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM_S.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM_S.c ****     *
 508:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 509:Generated_Source\PSoC5/PWM_S.c ****     *  None
 510:Generated_Source\PSoC5/PWM_S.c ****     *
 511:Generated_Source\PSoC5/PWM_S.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM_S.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM_S.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM_S.c ****     *
 515:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM_S.c ****                                        
 518:Generated_Source\PSoC5/PWM_S.c ****     {
 355              		.loc 1 518 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 360 0000 80B4     		push	{r7}
 361              		.cfi_def_cfa_offset 4
 362              		.cfi_offset 7, -4
 363 0002 83B0     		sub	sp, sp, #12
 364              		.cfi_def_cfa_offset 16
 365 0004 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 367 0006 0346     		mov	r3, r0
 368 0008 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/PWM_S.c ****         #if(PWM_S_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG16(PWM_S_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM_S.c ****         #else
 522:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG8(PWM_S_COMPARE1_LSB_PTR, compare);
 369              		.loc 1 522 0
 370 000a 044A     		ldr	r2, .L25
 371 000c FB79     		ldrb	r3, [r7, #7]
 372 000e 1370     		strb	r3, [r2]
 523:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM_S.c **** 
 525:Generated_Source\PSoC5/PWM_S.c ****         #if (PWM_S_PWMMode == PWM_S__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM_S.c ****             #if(PWM_S_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM_S.c ****                 CY_SET_REG16(PWM_S_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM_S.c ****             #else
 529:Generated_Source\PSoC5/PWM_S.c ****                 CY_SET_REG8(PWM_S_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM_S.c ****             #endif /* (PWM_S_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_PWMMode == PWM_S__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM_S.c ****     }
 373              		.loc 1 532 0
 374 0010 00BF     		nop
 375 0012 0C37     		adds	r7, r7, #12
 376              		.cfi_def_cfa_offset 4
 377 0014 BD46     		mov	sp, r7
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 0016 80BC     		pop	{r7}
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 17


 381              		.cfi_restore 7
 382              		.cfi_def_cfa_offset 0
 383 0018 7047     		bx	lr
 384              	.L26:
 385 001a 00BF     		.align	2
 386              	.L25:
 387 001c 2C640040 		.word	1073767468
 388              		.cfi_endproc
 389              	.LFE7:
 390              		.size	PWM_S_WriteCompare, .-PWM_S_WriteCompare
 391              		.section	.text.PWM_S_ReadControlRegister,"ax",%progbits
 392              		.align	2
 393              		.global	PWM_S_ReadControlRegister
 394              		.thumb
 395              		.thumb_func
 396              		.type	PWM_S_ReadControlRegister, %function
 397              	PWM_S_ReadControlRegister:
 398              	.LFB8:
 533:Generated_Source\PSoC5/PWM_S.c **** 
 534:Generated_Source\PSoC5/PWM_S.c **** 
 535:Generated_Source\PSoC5/PWM_S.c **** #else
 536:Generated_Source\PSoC5/PWM_S.c **** 
 537:Generated_Source\PSoC5/PWM_S.c **** 
 538:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_WriteCompare1
 540:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM_S.c ****     *
 542:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM_S.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM_S.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM_S.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM_S.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM_S.c ****     *
 548:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM_S.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM_S.c ****     *
 551:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 552:Generated_Source\PSoC5/PWM_S.c ****     *  None
 553:Generated_Source\PSoC5/PWM_S.c ****     *
 554:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM_S.c ****                                         
 557:Generated_Source\PSoC5/PWM_S.c ****     {
 558:Generated_Source\PSoC5/PWM_S.c ****         #if(PWM_S_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG16(PWM_S_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM_S.c ****         #else
 561:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG8(PWM_S_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM_S.c ****     }
 564:Generated_Source\PSoC5/PWM_S.c **** 
 565:Generated_Source\PSoC5/PWM_S.c **** 
 566:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_WriteCompare2
 568:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM_S.c ****     *
 570:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM_S.c ****     *  This funtion is used to change the compare value, for compare1 output.
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 18


 572:Generated_Source\PSoC5/PWM_S.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM_S.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM_S.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM_S.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM_S.c ****     *
 577:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM_S.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM_S.c ****     *
 580:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 581:Generated_Source\PSoC5/PWM_S.c ****     *  None
 582:Generated_Source\PSoC5/PWM_S.c ****     *
 583:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM_S.c ****                                         
 586:Generated_Source\PSoC5/PWM_S.c ****     {
 587:Generated_Source\PSoC5/PWM_S.c ****         #if(PWM_S_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG16(PWM_S_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM_S.c ****         #else
 590:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG8(PWM_S_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM_S.c ****     }
 593:Generated_Source\PSoC5/PWM_S.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM_S.c **** 
 595:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM_S.c **** 
 597:Generated_Source\PSoC5/PWM_S.c **** 
 598:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_WriteDeadTime
 600:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM_S.c ****     *
 602:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM_S.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM_S.c ****     *
 605:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM_S.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM_S.c ****     *
 608:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 609:Generated_Source\PSoC5/PWM_S.c ****     *  None
 610:Generated_Source\PSoC5/PWM_S.c ****     *
 611:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM_S.c ****     {
 614:Generated_Source\PSoC5/PWM_S.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM_S.c ****         #if(!PWM_S_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM_S.c ****             CY_SET_REG8(PWM_S_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM_S.c ****         #else
 618:Generated_Source\PSoC5/PWM_S.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM_S.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM_S.c ****             PWM_S_DEADBAND_COUNT &= ((uint8)(~PWM_S_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM_S.c **** 
 622:Generated_Source\PSoC5/PWM_S.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM_S.c ****             #if(PWM_S_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_S_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM_S.c ****                                                     PWM_S_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM_S.c ****             #else
 627:Generated_Source\PSoC5/PWM_S.c ****                 PWM_S_DEADBAND_COUNT |= deadtime & PWM_S_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM_S.c ****             #endif /* (PWM_S_DEADBAND_COUNT_SHIFT) */
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 19


 629:Generated_Source\PSoC5/PWM_S.c **** 
 630:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (!PWM_S_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM_S.c ****     }
 632:Generated_Source\PSoC5/PWM_S.c **** 
 633:Generated_Source\PSoC5/PWM_S.c **** 
 634:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadDeadTime
 636:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM_S.c ****     *
 638:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM_S.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM_S.c ****     *
 641:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM_S.c ****     *  None
 643:Generated_Source\PSoC5/PWM_S.c ****     *
 644:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 645:Generated_Source\PSoC5/PWM_S.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM_S.c ****     *
 647:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM_S.c ****     {
 650:Generated_Source\PSoC5/PWM_S.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM_S.c ****         #if(!PWM_S_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM_S.c ****             return (CY_GET_REG8(PWM_S_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM_S.c ****         #else
 654:Generated_Source\PSoC5/PWM_S.c **** 
 655:Generated_Source\PSoC5/PWM_S.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM_S.c ****             #if(PWM_S_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM_S.c ****                 return ((uint8)(((uint8)(PWM_S_DEADBAND_COUNT & PWM_S_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM_S.c ****                                                                            PWM_S_DEADBAND_COUNT_SHI
 659:Generated_Source\PSoC5/PWM_S.c ****             #else
 660:Generated_Source\PSoC5/PWM_S.c ****                 return (PWM_S_DEADBAND_COUNT & PWM_S_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM_S.c ****             #endif /* (PWM_S_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (!PWM_S_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM_S.c ****     }
 664:Generated_Source\PSoC5/PWM_S.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM_S.c **** 
 666:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_UseStatus || PWM_S_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM_S.c **** 
 668:Generated_Source\PSoC5/PWM_S.c **** 
 669:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_SetInterruptMode
 671:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM_S.c ****     *
 673:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM_S.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM_S.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM_S.c ****     *
 677:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM_S.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM_S.c ****     *
 680:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 681:Generated_Source\PSoC5/PWM_S.c ****     *  None
 682:Generated_Source\PSoC5/PWM_S.c ****     *
 683:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM_S.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 20


 686:Generated_Source\PSoC5/PWM_S.c ****         CY_SET_REG8(PWM_S_STATUS_MASK_PTR, interruptMode);
 687:Generated_Source\PSoC5/PWM_S.c ****     }
 688:Generated_Source\PSoC5/PWM_S.c **** 
 689:Generated_Source\PSoC5/PWM_S.c **** 
 690:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM_S.c ****     *
 694:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM_S.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM_S.c ****     *
 697:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM_S.c ****     *  None
 699:Generated_Source\PSoC5/PWM_S.c ****     *
 700:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 701:Generated_Source\PSoC5/PWM_S.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM_S.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM_S.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM_S.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM_S.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM_S.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM_S.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM_S.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM_S.c ****     *
 710:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM_S.c ****     {
 713:Generated_Source\PSoC5/PWM_S.c ****         return (CY_GET_REG8(PWM_S_STATUS_PTR));
 714:Generated_Source\PSoC5/PWM_S.c ****     }
 715:Generated_Source\PSoC5/PWM_S.c **** 
 716:Generated_Source\PSoC5/PWM_S.c **** #endif /* (PWM_S_UseStatus || PWM_S_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM_S.c **** 
 718:Generated_Source\PSoC5/PWM_S.c **** 
 719:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_UseControl)
 720:Generated_Source\PSoC5/PWM_S.c **** 
 721:Generated_Source\PSoC5/PWM_S.c **** 
 722:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadControlRegister
 724:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM_S.c ****     *
 726:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM_S.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM_S.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM_S.c ****     *
 730:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM_S.c ****     *  None
 732:Generated_Source\PSoC5/PWM_S.c ****     *
 733:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 734:Generated_Source\PSoC5/PWM_S.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM_S.c ****     *
 736:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM_S.c ****     {
 399              		.loc 1 738 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 8
 402              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 21


 403              		@ link register save eliminated.
 404 0000 80B4     		push	{r7}
 405              		.cfi_def_cfa_offset 4
 406              		.cfi_offset 7, -4
 407 0002 83B0     		sub	sp, sp, #12
 408              		.cfi_def_cfa_offset 16
 409 0004 00AF     		add	r7, sp, #0
 410              		.cfi_def_cfa_register 7
 739:Generated_Source\PSoC5/PWM_S.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM_S.c **** 
 741:Generated_Source\PSoC5/PWM_S.c ****         result = CY_GET_REG8(PWM_S_CONTROL_PTR);
 411              		.loc 1 741 0
 412 0006 044B     		ldr	r3, .L29
 413 0008 1B78     		ldrb	r3, [r3]
 414 000a FB71     		strb	r3, [r7, #7]
 742:Generated_Source\PSoC5/PWM_S.c ****         return (result);
 415              		.loc 1 742 0
 416 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 743:Generated_Source\PSoC5/PWM_S.c ****     }
 417              		.loc 1 743 0
 418 000e 1846     		mov	r0, r3
 419 0010 0C37     		adds	r7, r7, #12
 420              		.cfi_def_cfa_offset 4
 421 0012 BD46     		mov	sp, r7
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0014 80BC     		pop	{r7}
 425              		.cfi_restore 7
 426              		.cfi_def_cfa_offset 0
 427 0016 7047     		bx	lr
 428              	.L30:
 429              		.align	2
 430              	.L29:
 431 0018 7C640040 		.word	1073767548
 432              		.cfi_endproc
 433              	.LFE8:
 434              		.size	PWM_S_ReadControlRegister, .-PWM_S_ReadControlRegister
 435              		.section	.text.PWM_S_WriteControlRegister,"ax",%progbits
 436              		.align	2
 437              		.global	PWM_S_WriteControlRegister
 438              		.thumb
 439              		.thumb_func
 440              		.type	PWM_S_WriteControlRegister, %function
 441              	PWM_S_WriteControlRegister:
 442              	.LFB9:
 744:Generated_Source\PSoC5/PWM_S.c **** 
 745:Generated_Source\PSoC5/PWM_S.c **** 
 746:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_WriteControlRegister
 748:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM_S.c ****     *
 750:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM_S.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM_S.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM_S.c ****     *
 754:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM_S.c ****     *  uint8 control: Control register bit field, The status register bits are:
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 22


 756:Generated_Source\PSoC5/PWM_S.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM_S.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM_S.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM_S.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM_S.c ****     *
 761:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 762:Generated_Source\PSoC5/PWM_S.c ****     *  None
 763:Generated_Source\PSoC5/PWM_S.c ****     *
 764:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM_S.c ****     void PWM_S_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM_S.c ****     {
 443              		.loc 1 766 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 448 0000 80B4     		push	{r7}
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 7, -4
 451 0002 83B0     		sub	sp, sp, #12
 452              		.cfi_def_cfa_offset 16
 453 0004 00AF     		add	r7, sp, #0
 454              		.cfi_def_cfa_register 7
 455 0006 0346     		mov	r3, r0
 456 0008 FB71     		strb	r3, [r7, #7]
 767:Generated_Source\PSoC5/PWM_S.c ****         CY_SET_REG8(PWM_S_CONTROL_PTR, control);
 457              		.loc 1 767 0
 458 000a 044A     		ldr	r2, .L32
 459 000c FB79     		ldrb	r3, [r7, #7]
 460 000e 1370     		strb	r3, [r2]
 768:Generated_Source\PSoC5/PWM_S.c ****     }
 461              		.loc 1 768 0
 462 0010 00BF     		nop
 463 0012 0C37     		adds	r7, r7, #12
 464              		.cfi_def_cfa_offset 4
 465 0014 BD46     		mov	sp, r7
 466              		.cfi_def_cfa_register 13
 467              		@ sp needed
 468 0016 80BC     		pop	{r7}
 469              		.cfi_restore 7
 470              		.cfi_def_cfa_offset 0
 471 0018 7047     		bx	lr
 472              	.L33:
 473 001a 00BF     		.align	2
 474              	.L32:
 475 001c 7C640040 		.word	1073767548
 476              		.cfi_endproc
 477              	.LFE9:
 478              		.size	PWM_S_WriteControlRegister, .-PWM_S_WriteControlRegister
 479              		.section	.text.PWM_S_ReadCapture,"ax",%progbits
 480              		.align	2
 481              		.global	PWM_S_ReadCapture
 482              		.thumb
 483              		.thumb_func
 484              		.type	PWM_S_ReadCapture, %function
 485              	PWM_S_ReadCapture:
 486              	.LFB10:
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 23


 769:Generated_Source\PSoC5/PWM_S.c **** 
 770:Generated_Source\PSoC5/PWM_S.c **** #endif /* (PWM_S_UseControl) */
 771:Generated_Source\PSoC5/PWM_S.c **** 
 772:Generated_Source\PSoC5/PWM_S.c **** 
 773:Generated_Source\PSoC5/PWM_S.c **** #if (!PWM_S_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM_S.c **** 
 775:Generated_Source\PSoC5/PWM_S.c **** 
 776:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadCapture
 778:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM_S.c ****     *
 780:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM_S.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM_S.c ****     *
 783:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM_S.c ****     *  None
 785:Generated_Source\PSoC5/PWM_S.c ****     *
 786:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 787:Generated_Source\PSoC5/PWM_S.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM_S.c ****     *
 789:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM_S.c ****     {
 487              		.loc 1 791 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492 0000 80B4     		push	{r7}
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 7, -4
 495 0002 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 792:Generated_Source\PSoC5/PWM_S.c ****         return (CY_GET_REG8(PWM_S_CAPTURE_LSB_PTR));
 497              		.loc 1 792 0
 498 0004 034B     		ldr	r3, .L36
 499 0006 1B78     		ldrb	r3, [r3]
 500 0008 DBB2     		uxtb	r3, r3
 793:Generated_Source\PSoC5/PWM_S.c ****     }
 501              		.loc 1 793 0
 502 000a 1846     		mov	r0, r3
 503 000c BD46     		mov	sp, r7
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 000e 80BC     		pop	{r7}
 507              		.cfi_restore 7
 508              		.cfi_def_cfa_offset 0
 509 0010 7047     		bx	lr
 510              	.L37:
 511 0012 00BF     		.align	2
 512              	.L36:
 513 0014 5C640040 		.word	1073767516
 514              		.cfi_endproc
 515              	.LFE10:
 516              		.size	PWM_S_ReadCapture, .-PWM_S_ReadCapture
 517              		.section	.text.PWM_S_ReadCompare,"ax",%progbits
 518              		.align	2
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 24


 519              		.global	PWM_S_ReadCompare
 520              		.thumb
 521              		.thumb_func
 522              		.type	PWM_S_ReadCompare, %function
 523              	PWM_S_ReadCompare:
 524              	.LFB11:
 794:Generated_Source\PSoC5/PWM_S.c **** 
 795:Generated_Source\PSoC5/PWM_S.c **** #endif /* (!PWM_S_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM_S.c **** 
 797:Generated_Source\PSoC5/PWM_S.c **** 
 798:Generated_Source\PSoC5/PWM_S.c **** #if (PWM_S_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM_S.c **** 
 800:Generated_Source\PSoC5/PWM_S.c **** 
 801:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadCompare
 803:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM_S.c ****     *
 805:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM_S.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM_S.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM_S.c ****     *
 809:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM_S.c ****     *  None
 811:Generated_Source\PSoC5/PWM_S.c ****     *
 812:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 813:Generated_Source\PSoC5/PWM_S.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM_S.c ****     *
 815:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM_S.c ****     {
 525              		.loc 1 817 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530 0000 80B4     		push	{r7}
 531              		.cfi_def_cfa_offset 4
 532              		.cfi_offset 7, -4
 533 0002 00AF     		add	r7, sp, #0
 534              		.cfi_def_cfa_register 7
 818:Generated_Source\PSoC5/PWM_S.c ****         #if(PWM_S_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM_S.c ****             return ((uint8)CY_GET_REG16(PWM_S_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM_S.c ****         #else
 821:Generated_Source\PSoC5/PWM_S.c ****             return (CY_GET_REG8(PWM_S_COMPARE1_LSB_PTR));
 535              		.loc 1 821 0
 536 0004 034B     		ldr	r3, .L40
 537 0006 1B78     		ldrb	r3, [r3]
 538 0008 DBB2     		uxtb	r3, r3
 822:Generated_Source\PSoC5/PWM_S.c ****         #endif /* (PWM_S_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM_S.c ****     }
 539              		.loc 1 823 0
 540 000a 1846     		mov	r0, r3
 541 000c BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 000e 80BC     		pop	{r7}
 545              		.cfi_restore 7
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 25


 546              		.cfi_def_cfa_offset 0
 547 0010 7047     		bx	lr
 548              	.L41:
 549 0012 00BF     		.align	2
 550              	.L40:
 551 0014 2C640040 		.word	1073767468
 552              		.cfi_endproc
 553              	.LFE11:
 554              		.size	PWM_S_ReadCompare, .-PWM_S_ReadCompare
 555              		.section	.text.PWM_S_ReadPeriod,"ax",%progbits
 556              		.align	2
 557              		.global	PWM_S_ReadPeriod
 558              		.thumb
 559              		.thumb_func
 560              		.type	PWM_S_ReadPeriod, %function
 561              	PWM_S_ReadPeriod:
 562              	.LFB12:
 824:Generated_Source\PSoC5/PWM_S.c **** 
 825:Generated_Source\PSoC5/PWM_S.c **** #else
 826:Generated_Source\PSoC5/PWM_S.c **** 
 827:Generated_Source\PSoC5/PWM_S.c **** 
 828:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadCompare1
 830:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM_S.c ****     *
 832:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM_S.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM_S.c ****     *
 835:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM_S.c ****     *  None
 837:Generated_Source\PSoC5/PWM_S.c ****     *
 838:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 839:Generated_Source\PSoC5/PWM_S.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM_S.c ****     *
 841:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM_S.c ****     {
 844:Generated_Source\PSoC5/PWM_S.c ****         return (CY_GET_REG8(PWM_S_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM_S.c ****     }
 846:Generated_Source\PSoC5/PWM_S.c **** 
 847:Generated_Source\PSoC5/PWM_S.c **** 
 848:Generated_Source\PSoC5/PWM_S.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM_S.c ****     * Function Name: PWM_S_ReadCompare2
 850:Generated_Source\PSoC5/PWM_S.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM_S.c ****     *
 852:Generated_Source\PSoC5/PWM_S.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM_S.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM_S.c ****     *
 855:Generated_Source\PSoC5/PWM_S.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM_S.c ****     *  None
 857:Generated_Source\PSoC5/PWM_S.c ****     *
 858:Generated_Source\PSoC5/PWM_S.c ****     * Return:
 859:Generated_Source\PSoC5/PWM_S.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM_S.c ****     *
 861:Generated_Source\PSoC5/PWM_S.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM_S.c ****     uint8 PWM_S_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM_S.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 26


 864:Generated_Source\PSoC5/PWM_S.c ****         return (CY_GET_REG8(PWM_S_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM_S.c ****     }
 866:Generated_Source\PSoC5/PWM_S.c **** 
 867:Generated_Source\PSoC5/PWM_S.c **** #endif /* (PWM_S_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM_S.c **** 
 869:Generated_Source\PSoC5/PWM_S.c **** 
 870:Generated_Source\PSoC5/PWM_S.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM_S.c **** * Function Name: PWM_S_ReadPeriod
 872:Generated_Source\PSoC5/PWM_S.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM_S.c **** *
 874:Generated_Source\PSoC5/PWM_S.c **** * Summary:
 875:Generated_Source\PSoC5/PWM_S.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM_S.c **** *
 877:Generated_Source\PSoC5/PWM_S.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM_S.c **** *  None
 879:Generated_Source\PSoC5/PWM_S.c **** *
 880:Generated_Source\PSoC5/PWM_S.c **** * Return:
 881:Generated_Source\PSoC5/PWM_S.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM_S.c **** *
 883:Generated_Source\PSoC5/PWM_S.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM_S.c **** uint8 PWM_S_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM_S.c **** {
 563              		.loc 1 885 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568 0000 80B4     		push	{r7}
 569              		.cfi_def_cfa_offset 4
 570              		.cfi_offset 7, -4
 571 0002 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 886:Generated_Source\PSoC5/PWM_S.c ****     #if(PWM_S_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM_S.c ****         return ((uint8)CY_GET_REG16(PWM_S_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM_S.c ****     #else
 889:Generated_Source\PSoC5/PWM_S.c ****         return (CY_GET_REG8(PWM_S_PERIOD_LSB_PTR));
 573              		.loc 1 889 0
 574 0004 034B     		ldr	r3, .L44
 575 0006 1B78     		ldrb	r3, [r3]
 576 0008 DBB2     		uxtb	r3, r3
 890:Generated_Source\PSoC5/PWM_S.c ****     #endif /* (PWM_S_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM_S.c **** }
 577              		.loc 1 891 0
 578 000a 1846     		mov	r0, r3
 579 000c BD46     		mov	sp, r7
 580              		.cfi_def_cfa_register 13
 581              		@ sp needed
 582 000e 80BC     		pop	{r7}
 583              		.cfi_restore 7
 584              		.cfi_def_cfa_offset 0
 585 0010 7047     		bx	lr
 586              	.L45:
 587 0012 00BF     		.align	2
 588              	.L44:
 589 0014 4C640040 		.word	1073767500
 590              		.cfi_endproc
 591              	.LFE12:
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 27


 592              		.size	PWM_S_ReadPeriod, .-PWM_S_ReadPeriod
 593              		.text
 594              	.Letext0:
 595              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 596              		.section	.debug_info,"",%progbits
 597              	.Ldebug_info0:
 598 0000 23020000 		.4byte	0x223
 599 0004 0400     		.2byte	0x4
 600 0006 00000000 		.4byte	.Ldebug_abbrev0
 601 000a 04       		.byte	0x4
 602 000b 01       		.uleb128 0x1
 603 000c 34010000 		.4byte	.LASF33
 604 0010 0C       		.byte	0xc
 605 0011 F1000000 		.4byte	.LASF34
 606 0015 86000000 		.4byte	.LASF35
 607 0019 00000000 		.4byte	.Ldebug_ranges0+0
 608 001d 00000000 		.4byte	0
 609 0021 00000000 		.4byte	.Ldebug_line0
 610 0025 02       		.uleb128 0x2
 611 0026 01       		.byte	0x1
 612 0027 06       		.byte	0x6
 613 0028 97020000 		.4byte	.LASF0
 614 002c 02       		.uleb128 0x2
 615 002d 01       		.byte	0x1
 616 002e 08       		.byte	0x8
 617 002f 68000000 		.4byte	.LASF1
 618 0033 02       		.uleb128 0x2
 619 0034 02       		.byte	0x2
 620 0035 05       		.byte	0x5
 621 0036 7C020000 		.4byte	.LASF2
 622 003a 02       		.uleb128 0x2
 623 003b 02       		.byte	0x2
 624 003c 07       		.byte	0x7
 625 003d 3A000000 		.4byte	.LASF3
 626 0041 02       		.uleb128 0x2
 627 0042 04       		.byte	0x4
 628 0043 05       		.byte	0x5
 629 0044 8E020000 		.4byte	.LASF4
 630 0048 02       		.uleb128 0x2
 631 0049 04       		.byte	0x4
 632 004a 07       		.byte	0x7
 633 004b D9000000 		.4byte	.LASF5
 634 004f 02       		.uleb128 0x2
 635 0050 08       		.byte	0x8
 636 0051 05       		.byte	0x5
 637 0052 57020000 		.4byte	.LASF6
 638 0056 02       		.uleb128 0x2
 639 0057 08       		.byte	0x8
 640 0058 07       		.byte	0x7
 641 0059 08020000 		.4byte	.LASF7
 642 005d 03       		.uleb128 0x3
 643 005e 04       		.byte	0x4
 644 005f 05       		.byte	0x5
 645 0060 696E7400 		.ascii	"int\000"
 646 0064 02       		.uleb128 0x2
 647 0065 04       		.byte	0x4
 648 0066 07       		.byte	0x7
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 28


 649 0067 4D000000 		.4byte	.LASF8
 650 006b 04       		.uleb128 0x4
 651 006c EB000000 		.4byte	.LASF12
 652 0070 02       		.byte	0x2
 653 0071 E901     		.2byte	0x1e9
 654 0073 2C000000 		.4byte	0x2c
 655 0077 02       		.uleb128 0x2
 656 0078 04       		.byte	0x4
 657 0079 04       		.byte	0x4
 658 007a 5A000000 		.4byte	.LASF9
 659 007e 02       		.uleb128 0x2
 660 007f 08       		.byte	0x8
 661 0080 04       		.byte	0x4
 662 0081 2D010000 		.4byte	.LASF10
 663 0085 02       		.uleb128 0x2
 664 0086 01       		.byte	0x1
 665 0087 08       		.byte	0x8
 666 0088 65020000 		.4byte	.LASF11
 667 008c 04       		.uleb128 0x4
 668 008d 81000000 		.4byte	.LASF13
 669 0091 02       		.byte	0x2
 670 0092 9302     		.2byte	0x293
 671 0094 98000000 		.4byte	0x98
 672 0098 05       		.uleb128 0x5
 673 0099 6B000000 		.4byte	0x6b
 674 009d 02       		.uleb128 0x2
 675 009e 04       		.byte	0x4
 676 009f 07       		.byte	0x7
 677 00a0 4E020000 		.4byte	.LASF14
 678 00a4 06       		.uleb128 0x6
 679 00a5 21010000 		.4byte	.LASF15
 680 00a9 01       		.byte	0x1
 681 00aa 37       		.byte	0x37
 682 00ab 00000000 		.4byte	.LFB0
 683 00af 24000000 		.4byte	.LFE0-.LFB0
 684 00b3 01       		.uleb128 0x1
 685 00b4 9C       		.byte	0x9c
 686 00b5 07       		.uleb128 0x7
 687 00b6 76000000 		.4byte	.LASF18
 688 00ba 01       		.byte	0x1
 689 00bb 54       		.byte	0x54
 690 00bc 00000000 		.4byte	.LFB1
 691 00c0 50000000 		.4byte	.LFE1-.LFB1
 692 00c4 01       		.uleb128 0x1
 693 00c5 9C       		.byte	0x9c
 694 00c6 D9000000 		.4byte	0xd9
 695 00ca 08       		.uleb128 0x8
 696 00cb 49020000 		.4byte	.LASF25
 697 00cf 01       		.byte	0x1
 698 00d0 57       		.byte	0x57
 699 00d1 6B000000 		.4byte	0x6b
 700 00d5 02       		.uleb128 0x2
 701 00d6 91       		.byte	0x91
 702 00d7 77       		.sleb128 -9
 703 00d8 00       		.byte	0
 704 00d9 09       		.uleb128 0x9
 705 00da 1F020000 		.4byte	.LASF16
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 29


 706 00de 01       		.byte	0x1
 707 00df C7       		.byte	0xc7
 708 00e0 00000000 		.4byte	.LFB2
 709 00e4 20000000 		.4byte	.LFE2-.LFB2
 710 00e8 01       		.uleb128 0x1
 711 00e9 9C       		.byte	0x9c
 712 00ea 09       		.uleb128 0x9
 713 00eb 3E020000 		.4byte	.LASF17
 714 00ef 01       		.byte	0x1
 715 00f0 E9       		.byte	0xe9
 716 00f1 00000000 		.4byte	.LFB3
 717 00f5 20000000 		.4byte	.LFE3-.LFB3
 718 00f9 01       		.uleb128 0x1
 719 00fa 9C       		.byte	0x9c
 720 00fb 0A       		.uleb128 0xa
 721 00fc C6000000 		.4byte	.LASF19
 722 0100 01       		.byte	0x1
 723 0101 9301     		.2byte	0x193
 724 0103 00000000 		.4byte	.LFB4
 725 0107 20000000 		.4byte	.LFE4-.LFB4
 726 010b 01       		.uleb128 0x1
 727 010c 9C       		.byte	0x9c
 728 010d 21010000 		.4byte	0x121
 729 0111 0B       		.uleb128 0xb
 730 0112 60000000 		.4byte	.LASF21
 731 0116 01       		.byte	0x1
 732 0117 9301     		.2byte	0x193
 733 0119 6B000000 		.4byte	0x6b
 734 011d 02       		.uleb128 0x2
 735 011e 91       		.byte	0x91
 736 011f 77       		.sleb128 -9
 737 0120 00       		.byte	0
 738 0121 0C       		.uleb128 0xc
 739 0122 6A020000 		.4byte	.LASF29
 740 0126 01       		.byte	0x1
 741 0127 A901     		.2byte	0x1a9
 742 0129 6B000000 		.4byte	0x6b
 743 012d 00000000 		.4byte	.LFB5
 744 0131 20000000 		.4byte	.LFE5-.LFB5
 745 0135 01       		.uleb128 0x1
 746 0136 9C       		.byte	0x9c
 747 0137 0A       		.uleb128 0xa
 748 0138 07000000 		.4byte	.LASF20
 749 013c 01       		.byte	0x1
 750 013d E201     		.2byte	0x1e2
 751 013f 00000000 		.4byte	.LFB6
 752 0143 20000000 		.4byte	.LFE6-.LFB6
 753 0147 01       		.uleb128 0x1
 754 0148 9C       		.byte	0x9c
 755 0149 5D010000 		.4byte	0x15d
 756 014d 0B       		.uleb128 0xb
 757 014e 19000000 		.4byte	.LASF22
 758 0152 01       		.byte	0x1
 759 0153 E201     		.2byte	0x1e2
 760 0155 6B000000 		.4byte	0x6b
 761 0159 02       		.uleb128 0x2
 762 015a 91       		.byte	0x91
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 30


 763 015b 77       		.sleb128 -9
 764 015c 00       		.byte	0
 765 015d 0A       		.uleb128 0xa
 766 015e AB020000 		.4byte	.LASF23
 767 0162 01       		.byte	0x1
 768 0163 0402     		.2byte	0x204
 769 0165 00000000 		.4byte	.LFB7
 770 0169 20000000 		.4byte	.LFE7-.LFB7
 771 016d 01       		.uleb128 0x1
 772 016e 9C       		.byte	0x9c
 773 016f 83010000 		.4byte	0x183
 774 0173 0B       		.uleb128 0xb
 775 0174 A3020000 		.4byte	.LASF24
 776 0178 01       		.byte	0x1
 777 0179 0402     		.2byte	0x204
 778 017b 6B000000 		.4byte	0x6b
 779 017f 02       		.uleb128 0x2
 780 0180 91       		.byte	0x91
 781 0181 77       		.sleb128 -9
 782 0182 00       		.byte	0
 783 0183 0D       		.uleb128 0xd
 784 0184 20000000 		.4byte	.LASF36
 785 0188 01       		.byte	0x1
 786 0189 E102     		.2byte	0x2e1
 787 018b 6B000000 		.4byte	0x6b
 788 018f 00000000 		.4byte	.LFB8
 789 0193 1C000000 		.4byte	.LFE8-.LFB8
 790 0197 01       		.uleb128 0x1
 791 0198 9C       		.byte	0x9c
 792 0199 AD010000 		.4byte	0x1ad
 793 019d 0E       		.uleb128 0xe
 794 019e 00000000 		.4byte	.LASF26
 795 01a2 01       		.byte	0x1
 796 01a3 E302     		.2byte	0x2e3
 797 01a5 6B000000 		.4byte	0x6b
 798 01a9 02       		.uleb128 0x2
 799 01aa 91       		.byte	0x91
 800 01ab 77       		.sleb128 -9
 801 01ac 00       		.byte	0
 802 01ad 0A       		.uleb128 0xa
 803 01ae ED010000 		.4byte	.LASF27
 804 01b2 01       		.byte	0x1
 805 01b3 FD02     		.2byte	0x2fd
 806 01b5 00000000 		.4byte	.LFB9
 807 01b9 20000000 		.4byte	.LFE9-.LFB9
 808 01bd 01       		.uleb128 0x1
 809 01be 9C       		.byte	0x9c
 810 01bf D3010000 		.4byte	0x1d3
 811 01c3 0B       		.uleb128 0xb
 812 01c4 86020000 		.4byte	.LASF28
 813 01c8 01       		.byte	0x1
 814 01c9 FD02     		.2byte	0x2fd
 815 01cb 6B000000 		.4byte	0x6b
 816 01cf 02       		.uleb128 0x2
 817 01d0 91       		.byte	0x91
 818 01d1 77       		.sleb128 -9
 819 01d2 00       		.byte	0
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 31


 820 01d3 0C       		.uleb128 0xc
 821 01d4 2C020000 		.4byte	.LASF30
 822 01d8 01       		.byte	0x1
 823 01d9 1603     		.2byte	0x316
 824 01db 6B000000 		.4byte	0x6b
 825 01df 00000000 		.4byte	.LFB10
 826 01e3 18000000 		.4byte	.LFE10-.LFB10
 827 01e7 01       		.uleb128 0x1
 828 01e8 9C       		.byte	0x9c
 829 01e9 0C       		.uleb128 0xc
 830 01ea DB010000 		.4byte	.LASF31
 831 01ee 01       		.byte	0x1
 832 01ef 3003     		.2byte	0x330
 833 01f1 6B000000 		.4byte	0x6b
 834 01f5 00000000 		.4byte	.LFB11
 835 01f9 18000000 		.4byte	.LFE11-.LFB11
 836 01fd 01       		.uleb128 0x1
 837 01fe 9C       		.byte	0x9c
 838 01ff 0C       		.uleb128 0xc
 839 0200 10010000 		.4byte	.LASF32
 840 0204 01       		.byte	0x1
 841 0205 7403     		.2byte	0x374
 842 0207 6B000000 		.4byte	0x6b
 843 020b 00000000 		.4byte	.LFB12
 844 020f 18000000 		.4byte	.LFE12-.LFB12
 845 0213 01       		.uleb128 0x1
 846 0214 9C       		.byte	0x9c
 847 0215 0F       		.uleb128 0xf
 848 0216 CD010000 		.4byte	.LASF37
 849 021a 01       		.byte	0x1
 850 021b 20       		.byte	0x20
 851 021c 6B000000 		.4byte	0x6b
 852 0220 05       		.uleb128 0x5
 853 0221 03       		.byte	0x3
 854 0222 00000000 		.4byte	PWM_S_initVar
 855 0226 00       		.byte	0
 856              		.section	.debug_abbrev,"",%progbits
 857              	.Ldebug_abbrev0:
 858 0000 01       		.uleb128 0x1
 859 0001 11       		.uleb128 0x11
 860 0002 01       		.byte	0x1
 861 0003 25       		.uleb128 0x25
 862 0004 0E       		.uleb128 0xe
 863 0005 13       		.uleb128 0x13
 864 0006 0B       		.uleb128 0xb
 865 0007 03       		.uleb128 0x3
 866 0008 0E       		.uleb128 0xe
 867 0009 1B       		.uleb128 0x1b
 868 000a 0E       		.uleb128 0xe
 869 000b 55       		.uleb128 0x55
 870 000c 17       		.uleb128 0x17
 871 000d 11       		.uleb128 0x11
 872 000e 01       		.uleb128 0x1
 873 000f 10       		.uleb128 0x10
 874 0010 17       		.uleb128 0x17
 875 0011 00       		.byte	0
 876 0012 00       		.byte	0
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 32


 877 0013 02       		.uleb128 0x2
 878 0014 24       		.uleb128 0x24
 879 0015 00       		.byte	0
 880 0016 0B       		.uleb128 0xb
 881 0017 0B       		.uleb128 0xb
 882 0018 3E       		.uleb128 0x3e
 883 0019 0B       		.uleb128 0xb
 884 001a 03       		.uleb128 0x3
 885 001b 0E       		.uleb128 0xe
 886 001c 00       		.byte	0
 887 001d 00       		.byte	0
 888 001e 03       		.uleb128 0x3
 889 001f 24       		.uleb128 0x24
 890 0020 00       		.byte	0
 891 0021 0B       		.uleb128 0xb
 892 0022 0B       		.uleb128 0xb
 893 0023 3E       		.uleb128 0x3e
 894 0024 0B       		.uleb128 0xb
 895 0025 03       		.uleb128 0x3
 896 0026 08       		.uleb128 0x8
 897 0027 00       		.byte	0
 898 0028 00       		.byte	0
 899 0029 04       		.uleb128 0x4
 900 002a 16       		.uleb128 0x16
 901 002b 00       		.byte	0
 902 002c 03       		.uleb128 0x3
 903 002d 0E       		.uleb128 0xe
 904 002e 3A       		.uleb128 0x3a
 905 002f 0B       		.uleb128 0xb
 906 0030 3B       		.uleb128 0x3b
 907 0031 05       		.uleb128 0x5
 908 0032 49       		.uleb128 0x49
 909 0033 13       		.uleb128 0x13
 910 0034 00       		.byte	0
 911 0035 00       		.byte	0
 912 0036 05       		.uleb128 0x5
 913 0037 35       		.uleb128 0x35
 914 0038 00       		.byte	0
 915 0039 49       		.uleb128 0x49
 916 003a 13       		.uleb128 0x13
 917 003b 00       		.byte	0
 918 003c 00       		.byte	0
 919 003d 06       		.uleb128 0x6
 920 003e 2E       		.uleb128 0x2e
 921 003f 00       		.byte	0
 922 0040 3F       		.uleb128 0x3f
 923 0041 19       		.uleb128 0x19
 924 0042 03       		.uleb128 0x3
 925 0043 0E       		.uleb128 0xe
 926 0044 3A       		.uleb128 0x3a
 927 0045 0B       		.uleb128 0xb
 928 0046 3B       		.uleb128 0x3b
 929 0047 0B       		.uleb128 0xb
 930 0048 27       		.uleb128 0x27
 931 0049 19       		.uleb128 0x19
 932 004a 11       		.uleb128 0x11
 933 004b 01       		.uleb128 0x1
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 33


 934 004c 12       		.uleb128 0x12
 935 004d 06       		.uleb128 0x6
 936 004e 40       		.uleb128 0x40
 937 004f 18       		.uleb128 0x18
 938 0050 9642     		.uleb128 0x2116
 939 0052 19       		.uleb128 0x19
 940 0053 00       		.byte	0
 941 0054 00       		.byte	0
 942 0055 07       		.uleb128 0x7
 943 0056 2E       		.uleb128 0x2e
 944 0057 01       		.byte	0x1
 945 0058 3F       		.uleb128 0x3f
 946 0059 19       		.uleb128 0x19
 947 005a 03       		.uleb128 0x3
 948 005b 0E       		.uleb128 0xe
 949 005c 3A       		.uleb128 0x3a
 950 005d 0B       		.uleb128 0xb
 951 005e 3B       		.uleb128 0x3b
 952 005f 0B       		.uleb128 0xb
 953 0060 27       		.uleb128 0x27
 954 0061 19       		.uleb128 0x19
 955 0062 11       		.uleb128 0x11
 956 0063 01       		.uleb128 0x1
 957 0064 12       		.uleb128 0x12
 958 0065 06       		.uleb128 0x6
 959 0066 40       		.uleb128 0x40
 960 0067 18       		.uleb128 0x18
 961 0068 9642     		.uleb128 0x2116
 962 006a 19       		.uleb128 0x19
 963 006b 01       		.uleb128 0x1
 964 006c 13       		.uleb128 0x13
 965 006d 00       		.byte	0
 966 006e 00       		.byte	0
 967 006f 08       		.uleb128 0x8
 968 0070 34       		.uleb128 0x34
 969 0071 00       		.byte	0
 970 0072 03       		.uleb128 0x3
 971 0073 0E       		.uleb128 0xe
 972 0074 3A       		.uleb128 0x3a
 973 0075 0B       		.uleb128 0xb
 974 0076 3B       		.uleb128 0x3b
 975 0077 0B       		.uleb128 0xb
 976 0078 49       		.uleb128 0x49
 977 0079 13       		.uleb128 0x13
 978 007a 02       		.uleb128 0x2
 979 007b 18       		.uleb128 0x18
 980 007c 00       		.byte	0
 981 007d 00       		.byte	0
 982 007e 09       		.uleb128 0x9
 983 007f 2E       		.uleb128 0x2e
 984 0080 00       		.byte	0
 985 0081 3F       		.uleb128 0x3f
 986 0082 19       		.uleb128 0x19
 987 0083 03       		.uleb128 0x3
 988 0084 0E       		.uleb128 0xe
 989 0085 3A       		.uleb128 0x3a
 990 0086 0B       		.uleb128 0xb
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 34


 991 0087 3B       		.uleb128 0x3b
 992 0088 0B       		.uleb128 0xb
 993 0089 27       		.uleb128 0x27
 994 008a 19       		.uleb128 0x19
 995 008b 11       		.uleb128 0x11
 996 008c 01       		.uleb128 0x1
 997 008d 12       		.uleb128 0x12
 998 008e 06       		.uleb128 0x6
 999 008f 40       		.uleb128 0x40
 1000 0090 18       		.uleb128 0x18
 1001 0091 9742     		.uleb128 0x2117
 1002 0093 19       		.uleb128 0x19
 1003 0094 00       		.byte	0
 1004 0095 00       		.byte	0
 1005 0096 0A       		.uleb128 0xa
 1006 0097 2E       		.uleb128 0x2e
 1007 0098 01       		.byte	0x1
 1008 0099 3F       		.uleb128 0x3f
 1009 009a 19       		.uleb128 0x19
 1010 009b 03       		.uleb128 0x3
 1011 009c 0E       		.uleb128 0xe
 1012 009d 3A       		.uleb128 0x3a
 1013 009e 0B       		.uleb128 0xb
 1014 009f 3B       		.uleb128 0x3b
 1015 00a0 05       		.uleb128 0x5
 1016 00a1 27       		.uleb128 0x27
 1017 00a2 19       		.uleb128 0x19
 1018 00a3 11       		.uleb128 0x11
 1019 00a4 01       		.uleb128 0x1
 1020 00a5 12       		.uleb128 0x12
 1021 00a6 06       		.uleb128 0x6
 1022 00a7 40       		.uleb128 0x40
 1023 00a8 18       		.uleb128 0x18
 1024 00a9 9742     		.uleb128 0x2117
 1025 00ab 19       		.uleb128 0x19
 1026 00ac 01       		.uleb128 0x1
 1027 00ad 13       		.uleb128 0x13
 1028 00ae 00       		.byte	0
 1029 00af 00       		.byte	0
 1030 00b0 0B       		.uleb128 0xb
 1031 00b1 05       		.uleb128 0x5
 1032 00b2 00       		.byte	0
 1033 00b3 03       		.uleb128 0x3
 1034 00b4 0E       		.uleb128 0xe
 1035 00b5 3A       		.uleb128 0x3a
 1036 00b6 0B       		.uleb128 0xb
 1037 00b7 3B       		.uleb128 0x3b
 1038 00b8 05       		.uleb128 0x5
 1039 00b9 49       		.uleb128 0x49
 1040 00ba 13       		.uleb128 0x13
 1041 00bb 02       		.uleb128 0x2
 1042 00bc 18       		.uleb128 0x18
 1043 00bd 00       		.byte	0
 1044 00be 00       		.byte	0
 1045 00bf 0C       		.uleb128 0xc
 1046 00c0 2E       		.uleb128 0x2e
 1047 00c1 00       		.byte	0
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 35


 1048 00c2 3F       		.uleb128 0x3f
 1049 00c3 19       		.uleb128 0x19
 1050 00c4 03       		.uleb128 0x3
 1051 00c5 0E       		.uleb128 0xe
 1052 00c6 3A       		.uleb128 0x3a
 1053 00c7 0B       		.uleb128 0xb
 1054 00c8 3B       		.uleb128 0x3b
 1055 00c9 05       		.uleb128 0x5
 1056 00ca 27       		.uleb128 0x27
 1057 00cb 19       		.uleb128 0x19
 1058 00cc 49       		.uleb128 0x49
 1059 00cd 13       		.uleb128 0x13
 1060 00ce 11       		.uleb128 0x11
 1061 00cf 01       		.uleb128 0x1
 1062 00d0 12       		.uleb128 0x12
 1063 00d1 06       		.uleb128 0x6
 1064 00d2 40       		.uleb128 0x40
 1065 00d3 18       		.uleb128 0x18
 1066 00d4 9742     		.uleb128 0x2117
 1067 00d6 19       		.uleb128 0x19
 1068 00d7 00       		.byte	0
 1069 00d8 00       		.byte	0
 1070 00d9 0D       		.uleb128 0xd
 1071 00da 2E       		.uleb128 0x2e
 1072 00db 01       		.byte	0x1
 1073 00dc 3F       		.uleb128 0x3f
 1074 00dd 19       		.uleb128 0x19
 1075 00de 03       		.uleb128 0x3
 1076 00df 0E       		.uleb128 0xe
 1077 00e0 3A       		.uleb128 0x3a
 1078 00e1 0B       		.uleb128 0xb
 1079 00e2 3B       		.uleb128 0x3b
 1080 00e3 05       		.uleb128 0x5
 1081 00e4 27       		.uleb128 0x27
 1082 00e5 19       		.uleb128 0x19
 1083 00e6 49       		.uleb128 0x49
 1084 00e7 13       		.uleb128 0x13
 1085 00e8 11       		.uleb128 0x11
 1086 00e9 01       		.uleb128 0x1
 1087 00ea 12       		.uleb128 0x12
 1088 00eb 06       		.uleb128 0x6
 1089 00ec 40       		.uleb128 0x40
 1090 00ed 18       		.uleb128 0x18
 1091 00ee 9742     		.uleb128 0x2117
 1092 00f0 19       		.uleb128 0x19
 1093 00f1 01       		.uleb128 0x1
 1094 00f2 13       		.uleb128 0x13
 1095 00f3 00       		.byte	0
 1096 00f4 00       		.byte	0
 1097 00f5 0E       		.uleb128 0xe
 1098 00f6 34       		.uleb128 0x34
 1099 00f7 00       		.byte	0
 1100 00f8 03       		.uleb128 0x3
 1101 00f9 0E       		.uleb128 0xe
 1102 00fa 3A       		.uleb128 0x3a
 1103 00fb 0B       		.uleb128 0xb
 1104 00fc 3B       		.uleb128 0x3b
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 36


 1105 00fd 05       		.uleb128 0x5
 1106 00fe 49       		.uleb128 0x49
 1107 00ff 13       		.uleb128 0x13
 1108 0100 02       		.uleb128 0x2
 1109 0101 18       		.uleb128 0x18
 1110 0102 00       		.byte	0
 1111 0103 00       		.byte	0
 1112 0104 0F       		.uleb128 0xf
 1113 0105 34       		.uleb128 0x34
 1114 0106 00       		.byte	0
 1115 0107 03       		.uleb128 0x3
 1116 0108 0E       		.uleb128 0xe
 1117 0109 3A       		.uleb128 0x3a
 1118 010a 0B       		.uleb128 0xb
 1119 010b 3B       		.uleb128 0x3b
 1120 010c 0B       		.uleb128 0xb
 1121 010d 49       		.uleb128 0x49
 1122 010e 13       		.uleb128 0x13
 1123 010f 3F       		.uleb128 0x3f
 1124 0110 19       		.uleb128 0x19
 1125 0111 02       		.uleb128 0x2
 1126 0112 18       		.uleb128 0x18
 1127 0113 00       		.byte	0
 1128 0114 00       		.byte	0
 1129 0115 00       		.byte	0
 1130              		.section	.debug_aranges,"",%progbits
 1131 0000 7C000000 		.4byte	0x7c
 1132 0004 0200     		.2byte	0x2
 1133 0006 00000000 		.4byte	.Ldebug_info0
 1134 000a 04       		.byte	0x4
 1135 000b 00       		.byte	0
 1136 000c 0000     		.2byte	0
 1137 000e 0000     		.2byte	0
 1138 0010 00000000 		.4byte	.LFB0
 1139 0014 24000000 		.4byte	.LFE0-.LFB0
 1140 0018 00000000 		.4byte	.LFB1
 1141 001c 50000000 		.4byte	.LFE1-.LFB1
 1142 0020 00000000 		.4byte	.LFB2
 1143 0024 20000000 		.4byte	.LFE2-.LFB2
 1144 0028 00000000 		.4byte	.LFB3
 1145 002c 20000000 		.4byte	.LFE3-.LFB3
 1146 0030 00000000 		.4byte	.LFB4
 1147 0034 20000000 		.4byte	.LFE4-.LFB4
 1148 0038 00000000 		.4byte	.LFB5
 1149 003c 20000000 		.4byte	.LFE5-.LFB5
 1150 0040 00000000 		.4byte	.LFB6
 1151 0044 20000000 		.4byte	.LFE6-.LFB6
 1152 0048 00000000 		.4byte	.LFB7
 1153 004c 20000000 		.4byte	.LFE7-.LFB7
 1154 0050 00000000 		.4byte	.LFB8
 1155 0054 1C000000 		.4byte	.LFE8-.LFB8
 1156 0058 00000000 		.4byte	.LFB9
 1157 005c 20000000 		.4byte	.LFE9-.LFB9
 1158 0060 00000000 		.4byte	.LFB10
 1159 0064 18000000 		.4byte	.LFE10-.LFB10
 1160 0068 00000000 		.4byte	.LFB11
 1161 006c 18000000 		.4byte	.LFE11-.LFB11
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 37


 1162 0070 00000000 		.4byte	.LFB12
 1163 0074 18000000 		.4byte	.LFE12-.LFB12
 1164 0078 00000000 		.4byte	0
 1165 007c 00000000 		.4byte	0
 1166              		.section	.debug_ranges,"",%progbits
 1167              	.Ldebug_ranges0:
 1168 0000 00000000 		.4byte	.LFB0
 1169 0004 24000000 		.4byte	.LFE0
 1170 0008 00000000 		.4byte	.LFB1
 1171 000c 50000000 		.4byte	.LFE1
 1172 0010 00000000 		.4byte	.LFB2
 1173 0014 20000000 		.4byte	.LFE2
 1174 0018 00000000 		.4byte	.LFB3
 1175 001c 20000000 		.4byte	.LFE3
 1176 0020 00000000 		.4byte	.LFB4
 1177 0024 20000000 		.4byte	.LFE4
 1178 0028 00000000 		.4byte	.LFB5
 1179 002c 20000000 		.4byte	.LFE5
 1180 0030 00000000 		.4byte	.LFB6
 1181 0034 20000000 		.4byte	.LFE6
 1182 0038 00000000 		.4byte	.LFB7
 1183 003c 20000000 		.4byte	.LFE7
 1184 0040 00000000 		.4byte	.LFB8
 1185 0044 1C000000 		.4byte	.LFE8
 1186 0048 00000000 		.4byte	.LFB9
 1187 004c 20000000 		.4byte	.LFE9
 1188 0050 00000000 		.4byte	.LFB10
 1189 0054 18000000 		.4byte	.LFE10
 1190 0058 00000000 		.4byte	.LFB11
 1191 005c 18000000 		.4byte	.LFE11
 1192 0060 00000000 		.4byte	.LFB12
 1193 0064 18000000 		.4byte	.LFE12
 1194 0068 00000000 		.4byte	0
 1195 006c 00000000 		.4byte	0
 1196              		.section	.debug_line,"",%progbits
 1197              	.Ldebug_line0:
 1198 0000 43010000 		.section	.debug_str,"MS",%progbits,1
 1198      02004200 
 1198      00000201 
 1198      FB0E0D00 
 1198      01010101 
 1199              	.LASF26:
 1200 0000 72657375 		.ascii	"result\000"
 1200      6C7400
 1201              	.LASF20:
 1202 0007 50574D5F 		.ascii	"PWM_S_WritePeriod\000"
 1202      535F5772 
 1202      69746550 
 1202      6572696F 
 1202      6400
 1203              	.LASF22:
 1204 0019 70657269 		.ascii	"period\000"
 1204      6F6400
 1205              	.LASF36:
 1206 0020 50574D5F 		.ascii	"PWM_S_ReadControlRegister\000"
 1206      535F5265 
 1206      6164436F 
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 38


 1206      6E74726F 
 1206      6C526567 
 1207              	.LASF3:
 1208 003a 73686F72 		.ascii	"short unsigned int\000"
 1208      7420756E 
 1208      7369676E 
 1208      65642069 
 1208      6E7400
 1209              	.LASF8:
 1210 004d 756E7369 		.ascii	"unsigned int\000"
 1210      676E6564 
 1210      20696E74 
 1210      00
 1211              	.LASF9:
 1212 005a 666C6F61 		.ascii	"float\000"
 1212      7400
 1213              	.LASF21:
 1214 0060 636F756E 		.ascii	"counter\000"
 1214      74657200 
 1215              	.LASF1:
 1216 0068 756E7369 		.ascii	"unsigned char\000"
 1216      676E6564 
 1216      20636861 
 1216      7200
 1217              	.LASF18:
 1218 0076 50574D5F 		.ascii	"PWM_S_Init\000"
 1218      535F496E 
 1218      697400
 1219              	.LASF13:
 1220 0081 72656738 		.ascii	"reg8\000"
 1220      00
 1221              	.LASF35:
 1222 0086 433A5C55 		.ascii	"C:\\Users\\User\\Dropbox\\67 PSOC\\PSoC-Potentiosta"
 1222      73657273 
 1222      5C557365 
 1222      725C4472 
 1222      6F70626F 
 1223 00b4 745C4269 		.ascii	"t\\Biosensor.cydsn\000"
 1223      6F73656E 
 1223      736F722E 
 1223      63796473 
 1223      6E00
 1224              	.LASF19:
 1225 00c6 50574D5F 		.ascii	"PWM_S_WriteCounter\000"
 1225      535F5772 
 1225      69746543 
 1225      6F756E74 
 1225      657200
 1226              	.LASF5:
 1227 00d9 6C6F6E67 		.ascii	"long unsigned int\000"
 1227      20756E73 
 1227      69676E65 
 1227      6420696E 
 1227      7400
 1228              	.LASF12:
 1229 00eb 75696E74 		.ascii	"uint8\000"
 1229      3800
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 39


 1230              	.LASF34:
 1231 00f1 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_S.c\000"
 1231      72617465 
 1231      645F536F 
 1231      75726365 
 1231      5C50536F 
 1232              	.LASF32:
 1233 0110 50574D5F 		.ascii	"PWM_S_ReadPeriod\000"
 1233      535F5265 
 1233      61645065 
 1233      72696F64 
 1233      00
 1234              	.LASF15:
 1235 0121 50574D5F 		.ascii	"PWM_S_Start\000"
 1235      535F5374 
 1235      61727400 
 1236              	.LASF10:
 1237 012d 646F7562 		.ascii	"double\000"
 1237      6C6500
 1238              	.LASF33:
 1239 0134 474E5520 		.ascii	"GNU C99 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1239      43393920 
 1239      352E342E 
 1239      31203230 
 1239      31363036 
 1240 0167 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1240      20726576 
 1240      6973696F 
 1240      6E203233 
 1240      37373135 
 1241 019a 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections -ffat-lto-objects\000"
 1241      74643D67 
 1241      6E753939 
 1241      202D6666 
 1241      756E6374 
 1242              	.LASF37:
 1243 01cd 50574D5F 		.ascii	"PWM_S_initVar\000"
 1243      535F696E 
 1243      69745661 
 1243      7200
 1244              	.LASF31:
 1245 01db 50574D5F 		.ascii	"PWM_S_ReadCompare\000"
 1245      535F5265 
 1245      6164436F 
 1245      6D706172 
 1245      6500
 1246              	.LASF27:
 1247 01ed 50574D5F 		.ascii	"PWM_S_WriteControlRegister\000"
 1247      535F5772 
 1247      69746543 
 1247      6F6E7472 
 1247      6F6C5265 
 1248              	.LASF7:
 1249 0208 6C6F6E67 		.ascii	"long long unsigned int\000"
 1249      206C6F6E 
 1249      6720756E 
 1249      7369676E 
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 40


 1249      65642069 
 1250              	.LASF16:
 1251 021f 50574D5F 		.ascii	"PWM_S_Enable\000"
 1251      535F456E 
 1251      61626C65 
 1251      00
 1252              	.LASF30:
 1253 022c 50574D5F 		.ascii	"PWM_S_ReadCapture\000"
 1253      535F5265 
 1253      61644361 
 1253      70747572 
 1253      6500
 1254              	.LASF17:
 1255 023e 50574D5F 		.ascii	"PWM_S_Stop\000"
 1255      535F5374 
 1255      6F7000
 1256              	.LASF25:
 1257 0249 6374726C 		.ascii	"ctrl\000"
 1257      00
 1258              	.LASF14:
 1259 024e 73697A65 		.ascii	"sizetype\000"
 1259      74797065 
 1259      00
 1260              	.LASF6:
 1261 0257 6C6F6E67 		.ascii	"long long int\000"
 1261      206C6F6E 
 1261      6720696E 
 1261      7400
 1262              	.LASF11:
 1263 0265 63686172 		.ascii	"char\000"
 1263      00
 1264              	.LASF29:
 1265 026a 50574D5F 		.ascii	"PWM_S_ReadCounter\000"
 1265      535F5265 
 1265      6164436F 
 1265      756E7465 
 1265      7200
 1266              	.LASF2:
 1267 027c 73686F72 		.ascii	"short int\000"
 1267      7420696E 
 1267      7400
 1268              	.LASF28:
 1269 0286 636F6E74 		.ascii	"control\000"
 1269      726F6C00 
 1270              	.LASF4:
 1271 028e 6C6F6E67 		.ascii	"long int\000"
 1271      20696E74 
 1271      00
 1272              	.LASF0:
 1273 0297 7369676E 		.ascii	"signed char\000"
 1273      65642063 
 1273      68617200 
 1274              	.LASF24:
 1275 02a3 636F6D70 		.ascii	"compare\000"
 1275      61726500 
 1276              	.LASF23:
 1277 02ab 50574D5F 		.ascii	"PWM_S_WriteCompare\000"
ARM GAS  C:\Users\User\AppData\Local\Temp\cchoOOZq.s 			page 41


 1277      535F5772 
 1277      69746543 
 1277      6F6D7061 
 1277      726500
 1278              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
